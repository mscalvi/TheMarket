<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema 

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="LblHomePlay.Text" xml:space="preserve">
    <value>Clique em Jogar para utilizar as cartelas que você criou com um de nossos serviços: jogo completo, com sorteios automáticos e conferência de cartelas, ou jogo manual, para você sortear os números manualmente e apenas conferir pelo software!
</value>
  </data>
  <data name="label1.Text" xml:space="preserve">
    <value>Para criar um Bingo você deve seguir os seguintes passos:

1- Criar uma Lista, que depois será preenchida com os nomes dos Elementos que participarão do bingo. A Lista deve ter um Nome, e pode ter também uma breve descrição, para que você a identifique facilmente depois. A Imagem Padrão da Lista é opcional, e será exibida caso um Elemento que não tenha Imagem seja projetado.

2- Registrar Elementos, que são os itens que aparecem nas Cartelas. Você pode registrar quantos Elementos (empresas, alunos, operações matemáticas, marcas de carro, jogadores da copa do mundo) desejar, e pode já adicioná-las a uma Lista conforme fizer o registro. Se não quiser adicionar ainda, você pode apenas registrar o Elemento e depois vinculá-la a uma Lista. Os Elementos devem ter um Nome, e um Nome para Cartela, e podem ter também uma Imagem, como uma foto ou logo, e até duas anotações diferentes (como telefones e e-mails, para conferir depois).
-Atente-se a Imagem! Se for de baixa qualidade, poderá ter sua visualização comprometida durante a exibição. Caso você não coloque uma imagem e resolva utilizar o Elemento em uma projeção, será exibido nosso logo padrão.

3- Crie Cartelas. Selecione de qual Lista serão as Cartelas, e quantas serão feitas. O Título é a mensagem que aparecerá na parte superior da Cartela, e a Mensagem Final é a mensagem na caixa de texto inferior, próximo à numeração. Ao Salvar você criará dois documentos: um PDF com todas as Cartelas, duas por página, e um PDF com a numeração que foi sorteada para cada Elemento do jogo. O número máximo de Cartelas geradas por jogo é 1000, e quanto maior o número maior a demora para gerar, assim como maior o tempo de processamento durante o jogo.</value>
  </data>
  <data name="label29.Text" xml:space="preserve">
    <value>Na Edição você pode:

1- Editar suas Listas, adicionando ou removendo Elementos dela, assim como excluí-las. Caso você exclua uma Lista todas as Cartelas salvas no banco de dados que a utilizaram também serão apagadas.

2- Editar seus Elementos, mudando qualquer uma de suas propriedades, ou ainda excluí-los. Caso você exclua um Elemento todas as Cartelas salvas no banco de dados que o utilizaram também serão apagados.

3- Visualizar seus Elementos, de forma rápida, para conferir suas anotações salvas com eles.</value>
  </data>
  <data name="label38.Text" xml:space="preserve">
    <value>O BingoManager possui dois modos de jogo para auxiliar sua diversão:

1- O Modo Manual permite que você selecione um conjunto de cartelas criado previamente. Cada Elemento será associado a um botão, que deve ser clicado quando ele for sorteado, fazendo com que o Nome e o Logo do Elemento apareçam na Tela de Exibição. Sempre que um botão for clicado o sistema irá conferir todas as cartelas que o possuem, avisando quais cartelas bateram Bingo! nesse sorteio. O jogo disponibiliza também duas modalidades de conferência: Quina (vertical e horizontal) e Cartela Cheia, que podem ser alterados a qualquer momento.

2- O Modo Completo fornece tudo o que o Modo Manual possui, mas ao invés de um botão por Elemento existe apenas um botão, o Sortear!, que irá sortear um Elemento para você, fazendo com que não seja necessários equipamentos físicos para jogar. Pode confiar, é sorteio mesmo!</value>
  </data>
  <metadata name="toolTip1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
</root>